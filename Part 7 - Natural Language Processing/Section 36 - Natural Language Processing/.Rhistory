x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0,2,0,0)
plot(x, y, lwd = 3, frame = FALSE, type = "1")
plot(x, y, lwd = 3, frame = FALSE, type = "l")
pbeta(0.75,2,1)
exit()
exit
quit()
print("Hellow World")
setwd("~/Google Drive/learn-to-learn/machine-learning/udemy/Machine Learning A-Z/Part 7 - Natural Language Processing/Section 36 - Natural Language Processing")
dataset_original = read.delim("Restaurante_Reviews.tsv", quote = '', stringsAsFactors = FALSE)
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '', stringsAsFactors = FALSE)
View(dataset_original)
install.packages('tm')
install.packages('SnowballC')
library('tm')
library('SnowballC')
corpus = VCorpus(VectorSource(dataset_original$Review))
library('SnowballC')
library('tm')
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, removeNumbers)
corpus
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio =0.8)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
dtm = DocumentTermMatrix(corpus)
dtm = removeSparseTerms(dtm, 0.999)
dataset = as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
dataset$Liked = factor(dataset$Liked, levels = c(0,1))
library(caTools)
set.seed(123)
split = sample.split(dataset, SplitRatio = 0.8)
trainning_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
install.packages('randomForest')
library(randomForest)
classifier = randomForest(x = trainning_set[-692],
y = trainning_set$Liked,
ntree = 10)
y_pred = predict(classifier, newdata = test_set[-692])
cm = table(test_set[, 692], y_pred)
y_pred = predict(classifier, newdata = test_set[-692])
cm = table(test_set[, 692], y_pred)
cm = table(test_set[, 692], y_pred)
View(trainning_set)
library(randomForest)
classifier = randomForest(x = trainning_set[-692],
y = trainning_set$Liked,
ntree = 10)
y_pred = predict(classifier, newdata = test_set[-692])
test_set[, 692]
test_set[: , 692]
test_set[:  692]
test_set[0, 692]
test_set[1, 692]
test_set[692, 692]
test_set[, 692]
test_set
test_set[-962]
test_set[962]
test_set[;962]
test_set[;, 962]
library('tm')
library('SnowballC')
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removeNumbers)
as.character(corpus[[1]])
corpus = tm_map(corpus, removePunctuation)
as.character(corpus[[1]])
corpus = tm_map(corpus, removeWords, stopwords())
as.character(corpus[[1]])
corpus = tm_map(corpus, stemDocument)
as.character(corpus[[1]])
corpus = tm_map(corpus, stripWhitespace)
as.character(corpus[[1]])
dataset_original = read.delim("Restaurant_Reviews.tsv", quote = '', stringsAsFactors = FALSE)
library('tm')
library('SnowballC')
corpus = VCorpus(VectorSource(dataset_original$Review))
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, stripWhitespace)
as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
as.character(corpus[[1]])
corpus = tm_map(corpus, removePunctuation)
as.character(corpus[[1]])
corpus = tm_map(corpus, removeWords, stopwords())
as.character(corpus[[1]])
corpus = tm_map(corpus, stemDocument)
as.character(corpus[[1]])
corpus = tm_map(corpus, stripWhitespace)
as.character(corpus[[1]])
as.character(corpus[[84]])
as.character(corpus[[841]])
dtm = DocumentTermMatrix(corpus)
dtm
dtm = removeSparseTerms(dtm, 0.99)
dtm
dtm = removeSparseTerms(dtm, 0.999)
dtm
dtm = removeSparseTerms(dtm, 0.7)
dtm
dtm = removeSparseTerms(dtm, 0.999)
dtm
dataset = as.data.frame(as.matrix(dtm))
View(dataset)
View(dataset)
View(dataset)
View(dataset)
